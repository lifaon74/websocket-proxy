import Conn = Deno.Conn;
import HttpConn = Deno.HttpConn;
import Listener = Deno.Listener;
import RequestEvent = Deno.RequestEvent;
import TlsConn = Deno.TlsConn;
import WebSocketUpgrade = Deno.WebSocketUpgrade;

// import { WebSocketClient, WebSocketServer } from './websocket.deps.ts';

// https://doc.deno.land/deno/stable/~/Deno.upgradeWebSocket

// const wss = new WebSocketServer(8081);
//
// wss.on('connection', (ws: WebSocketClient) => {
//   ws.on('message', (message: string) => {
//     console.log(message);
//     ws.send(message);
//   });
// });

// async function sendMail(): Promise<void> {
//   const config = SMTP_CONFIG;
//
//   const connection: TlsConn = await Deno.connectTls({
//     hostname: config.hostname,
//     port: config.port,
//   });
//
//   const readBuffer = new Uint8Array(1e6);
//   const readLoop = async () => {
//     while(true) {
//       const size: number | null = await connection.read(readBuffer);
//       if (size !== null) {
//         const data = readBuffer.slice(0, size);
//         const text = new TextDecoder().decode(data);
//         // console.log(data);
//         console.log(text);
//       }
//     }
//   };
//
//   readLoop();
//
//
//   const writeCommands = async (
//     ...commands: string[]
//   ): Promise<void> => {
//     const data = new TextEncoder().encode([...commands].join(' ') + '\r\n');
//     await connection.write(data);
//   };
//
//   await writeCommands('EHLO', config.hostname);
//
// }
//
// sendMail()
//   .catch((error: unknown) => {
//     console.log(error);
//   });

export interface IConnectTLSOptions {
  port: number;
  hostname: string;
  caCerts?: string[];
}

function extractRequestConfig(
  request: Request,
): IConnectTLSOptions {
  const url: URL = new URL(request.url);
  if (url.searchParams.has('config')) {
    const {
      port,
      hostname,
      caCerts,
    }: IConnectTLSOptions = JSON.parse(url.searchParams.get('config') as string);

    if (typeof port !== 'number') {
      throw new Error(`Expected number as 'port'`);
    } else if (typeof hostname !== 'string') {
      throw new Error(`Expected string as 'hostname'`);
    } else if (
      (caCerts !== void 0)
      && (
        !Array.isArray(caCerts)
        || caCerts.some((caCert: string): boolean => (typeof caCert !== 'string'))
      )
    ) {
      throw new Error(`Expected string[] or undefined as 'caCerts'`);
    } else {
      return {
        port,
        hostname,
        caCerts,
      };
    }
  } else {
    throw new Error(`Missing searchParams 'config'`);
  }
}

function errorToMessage(
  error: unknown,
): string {
  return (error instanceof Error)
    ? error.message
    : `Unknown error`;
}

async function handleRequestEvent(
  connection: Conn,
): Promise<void> {
  console.log('--- GOT REQUEST ---');
  const httpConnection: HttpConn = Deno.serveHttp(connection);
  const event: RequestEvent | null = await httpConnection.nextRequest();

  // if (event === null) {
  //   connection.close();
  // } else {
  //   const request: Request = event.request;
  //   if (request.headers.get('upgrade') === 'websocket') {
  //     console.log(' => IS WEBSOCKET');
  //     try {
  //
  //       /* NEW CONNECTION */
  //       const config: IConnectTLSOptions = extractRequestConfig(request);
  //       console.log(`host: ${config.hostname}:${config.hostname}`);
  //       const newConnection: TlsConn = await Deno.connectTls(config);
  //
  //       console.log(' => CONNECTION ESTABLISHED');
  //
  //       // WRITE
  //       let writePromise: Promise<number> = Promise.resolve(0);
  //
  //       const write = (
  //         buffer: Uint8Array,
  //       ): Promise<number> => {
  //         return writePromise = writePromise.then((): Promise<number> => {
  //           return newConnection.write(buffer);
  //         });
  //       };
  //
  //       // READ
  //       const readBuffer = new Uint8Array(1e6);
  //
  //       const readLoop = (): Promise<void> => {
  //         return newConnection.read(readBuffer)
  //           .then((size: number | null): Promise<void> | void => {
  //             if (size !== null) {
  //               const data: Uint8Array = readBuffer.slice(0, size);
  //               // console.log('IN', data);
  //               socket.send(data);
  //               // const text = new TextDecoder().decode(data);
  //               // console.log(data);
  //               // console.log(text);
  //               return readLoop();
  //             }
  //           });
  //       };
  //
  //       readLoop()
  //         .catch((error: unknown) => {
  //           return socket.close(1001, errorToMessage(error));
  //         });
  //
  //       /* WEBSOCKET */
  //
  //       const { socket, response }: WebSocketUpgrade = Deno.upgradeWebSocket(request);
  //
  //       socket.addEventListener('close', (): void => {
  //         newConnection.close();
  //       });
  //
  //       socket.addEventListener('error', (): void => {
  //         newConnection.close();
  //       });
  //
  //       socket.addEventListener('message', (event: MessageEvent<any>): void => {
  //         const data: ArrayBuffer | string = event.data;
  //         let _data: Uint8Array;
  //
  //         if (data instanceof ArrayBuffer) {
  //           _data = new Uint8Array(data);
  //         } else if (typeof data === 'string') {
  //           _data = new TextEncoder().encode(data);
  //         } else {
  //           return socket.close(1003, `Expected string or ArrayBuffer`);
  //         }
  //
  //         // console.log('OUT', _data);
  //
  //         write(_data)
  //           .catch((error: unknown) => {
  //             return socket.close(1001, errorToMessage(error));
  //           });
  //       });
  //
  //       return event.respondWith(response);
  //     } catch (error: unknown) {
  //       console.log(' !! CONNECTION FAILED');
  //       return event.respondWith(new Response(errorToMessage(error), { status: 400 }));
  //     }
  //   } else {
  //     return event.respondWith(new Response(null, { status: 501 }));
  //   }
  // }
}

interface IOptions {
  port?: number;
}

async function startServer(
  {
    port = 8081,
  }: IOptions = {},
): Promise<void> {
  const listener: Listener = Deno.listen({ port });

  let connection: Conn;
  while (connection = await listener.accept()) {
    handleRequestEvent(connection)
      .catch((error: unknown) => {
        console.log(`Failed to handle connection`);
        console.error(error);
      });
  }
}


/*----*/


function extractOptions(): IOptions {
  let port: number | undefined;

  for (let i = 0, l = Deno.args.length; i < l; i++) {
    const arg: string = Deno.args[i];
    let match: RegExpExecArray | null;

    if ((match = /^s*--ports*=s*(\d+)s*$/.exec(arg)) !== null) {
      port = Number(match[1]);
    } else {
      throw new Error(`Invalid arg: ${arg}`);
    }
  }

  return {
    port,
  };
}

startServer(
  extractOptions(),
);
